From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: GliczDev <67753196+GliczDev@users.noreply.github.com>
Date: Mon, 26 Aug 2024 15:13:50 +0200
Subject: [PATCH] Entity API


diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 27c18422134d2416b792ea8976e1fc5f7d4a7ed9..9052a3899aedddb7265b8cef7c80e3addd79d3ab 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -288,6 +288,18 @@ public class ServerPlayer extends Player {
         this.object = null;
     }
 
+    // Airflow start - Entity API
+    @Override
+    protected me.glicz.airflow.entity.living.AirPlayer createAirEntity() {
+        return new me.glicz.airflow.entity.living.AirPlayer(this);
+    }
+
+    @Override
+    public me.glicz.airflow.entity.living.AirPlayer getAirEntity() {
+        return (me.glicz.airflow.entity.living.AirPlayer) super.getAirEntity();
+    }
+    // Airflow end - Entity API
+
     @Override
     public BlockPos adjustSpawnLocation(ServerLevel level, BlockPos pos) {
         AABB aabb = this.getDimensions(Pose.STANDING).makeBoundingBox(Vec3.ZERO);
@@ -1629,7 +1641,7 @@ public class ServerPlayer extends Player {
 
     @Nullable
     public Component getTabListDisplayName() {
-        return null;
+        return super.getTabListDisplayName(); // Airflow - Entity API
     }
 
     @Override
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index fdef434e0553c24ba0a25179896028e892d6b3ba..1b32d5352e7b47f71580e7d998c43131e905f988 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -242,6 +242,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     private boolean hasVisualFire;
     @Nullable
     private BlockState inBlockState = null;
+    private final me.glicz.airflow.entity.AirEntity airEntity; // Airflow - Entity API
 
     public Entity(EntityType<?> entityType, Level level) {
         this.type = entityType;
@@ -263,8 +264,19 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         this.entityData = builder.build();
         this.setPos(0.0, 0.0, 0.0);
         this.eyeHeight = this.dimensions.eyeHeight();
+        this.airEntity = createAirEntity(); // Airflow - Entity API
     }
 
+    // Airflow start - Entity API
+    protected me.glicz.airflow.entity.AirEntity createAirEntity() {
+        return new me.glicz.airflow.entity.AirEntity(this);
+    }
+
+    public me.glicz.airflow.entity.AirEntity getAirEntity() {
+        return this.airEntity;
+    }
+    // Airflow end - Entity API
+
     public boolean isColliding(BlockPos pos, BlockState state) {
         VoxelShape collisionShape = state.getCollisionShape(this.level(), pos, CollisionContext.of(this));
         VoxelShape voxelShape = collisionShape.move(pos.getX(), pos.getY(), pos.getZ());
diff --git a/net/minecraft/world/entity/EntityType.java b/net/minecraft/world/entity/EntityType.java
index 7c1ee0965de421a195fba2f2bba953dc695f94ee..046cb8b6b1e1718213fed104a631facf667d0299 100644
--- a/net/minecraft/world/entity/EntityType.java
+++ b/net/minecraft/world/entity/EntityType.java
@@ -833,6 +833,7 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
     private final EntityDimensions dimensions;
     private final float spawnDimensionsScale;
     private final FeatureFlagSet requiredFeatures;
+    public final me.glicz.airflow.entity.AirEntityType<?> airEntityType = new me.glicz.airflow.entity.AirEntityType<>(this); // Airflow - Entity API
 
     private static <T extends Entity> EntityType<T> register(String key, EntityType.Builder<T> builder) {
         return Registry.register(BuiltInRegistries.ENTITY_TYPE, key, builder.build(key));
diff --git a/net/minecraft/world/entity/LivingEntity.java b/net/minecraft/world/entity/LivingEntity.java
index f86edec07abf454ef7b58575482910e9ed1b5b1a..bd9f19eede3657cf4f35708accc63a468b682e2c 100644
--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -269,6 +269,18 @@ public abstract class LivingEntity extends Entity implements Attackable {
         this.brain = this.makeBrain(new Dynamic<>(nbtOps, nbtOps.createMap(ImmutableMap.of(nbtOps.createString("memories"), nbtOps.emptyMap()))));
     }
 
+    // Airflow start - Entity API
+    @Override
+    protected me.glicz.airflow.entity.living.AirLivingEntity createAirEntity() {
+        return new me.glicz.airflow.entity.living.AirLivingEntity(this);
+    }
+
+    @Override
+    public me.glicz.airflow.entity.living.AirLivingEntity getAirEntity() {
+        return (me.glicz.airflow.entity.living.AirLivingEntity) super.getAirEntity();
+    }
+    // Airflow end - Entity API
+
     public Brain<?> getBrain() {
         return this.brain;
     }
diff --git a/net/minecraft/world/entity/Mob.java b/net/minecraft/world/entity/Mob.java
index b6a83f7f2c1f5b438252dc236c31aa31c766f832..282ac1ea5bb7081c9d2735adadc9ad4ab8c07b1c 100644
--- a/net/minecraft/world/entity/Mob.java
+++ b/net/minecraft/world/entity/Mob.java
@@ -150,6 +150,18 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
         }
     }
 
+    // Airflow start - Entity API
+    @Override
+    protected me.glicz.airflow.entity.living.AirMob createAirEntity() {
+        return new me.glicz.airflow.entity.living.AirMob(this);
+    }
+
+    @Override
+    public me.glicz.airflow.entity.living.AirMob getAirEntity() {
+        return (me.glicz.airflow.entity.living.AirMob) super.getAirEntity();
+    }
+    // Airflow end - Entity API
+
     protected void registerGoals() {
     }
 
diff --git a/net/minecraft/world/entity/player/Player.java b/net/minecraft/world/entity/player/Player.java
index 937fbb102bdefc2b382549dbfcf81a84d9ee6cf9..46499a3204c287ee9a31e280a4344073a0a6d173 100644
--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -202,6 +202,22 @@ public abstract class Player extends LivingEntity {
         this.rotOffs = 180.0F;
     }
 
+    // Airflow start - Entity API
+    @Override
+    protected me.glicz.airflow.entity.living.AirHumanoid createAirEntity() {
+        return null;
+    }
+
+    @Override
+    public me.glicz.airflow.entity.living.AirHumanoid getAirEntity() {
+        return (me.glicz.airflow.entity.living.AirHumanoid) super.getAirEntity();
+    }
+
+    public Component getTabListDisplayName() {
+        return getAirEntity().componentSerializer().serializeOrNull(getAirEntity().getPlayerListName());
+    }
+    // Airflow end - Entity API
+
     public boolean blockActionRestricted(Level level, BlockPos pos, GameType gameMode) {
         if (!gameMode.isBlockPlacingRestricted()) {
             return false;
