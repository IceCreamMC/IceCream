From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: GliczDev <67753196+GliczDev@users.noreply.github.com>
Date: Sat, 24 Aug 2024 09:20:35 +0200
Subject: [PATCH] Let the air flow!


diff --git a/net/minecraft/server/Main.java b/net/minecraft/server/Main.java
index 353fa0c07210adc9e29c4875621f9cbcc9df5151..37ea3900ec3a8668607acb91362eb68a202fd4ac 100644
--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -86,6 +86,7 @@ public class Main {
         OptionSpec<Void> optionSpec13 = optionParser.accepts("jfrProfile");
         OptionSpec<Path> optionSpec14 = optionParser.accepts("pidFile").withRequiredArg().withValuesConvertedBy(new PathConverter());
         OptionSpec<String> optionSpec15 = optionParser.nonOptions();
+        optionParser.allowsUnrecognizedOptions(); // Airflow
 
         try {
             OptionSet optionSet = optionParser.parse(args);
@@ -123,6 +124,14 @@ public class Main {
                 return;
             }
 
+            // Airflow start
+            me.glicz.airflow.Airflow airflow = new me.glicz.airflow.Airflow(args, dedicatedServerSettings);
+            if (!airflow.pluginLoader.preloadPlugins()) {
+                return;
+            }
+            airflow.pluginLoader.bootstrapPlugins();
+            // Airflow end
+
             File file = new File(optionSet.valueOf(optionSpec9));
             Services services = Services.create(new YggdrasilAuthenticationService(Proxy.NO_PROXY), file);
             String string = Optional.ofNullable(optionSet.valueOf(optionSpec10)).orElse(dedicatedServerSettings.getProperties().levelName);
@@ -255,7 +264,7 @@ public class Main {
                         dedicatedServerSettings,
                         DataFixers.getDataFixer(),
                         services,
-                        LoggerChunkProgressListener::createFromGameruleRadius
+                        LoggerChunkProgressListener::createFromGameruleRadius, airflow // Airflow
                     );
                     dedicatedServer1.setPort(optionSet.valueOf(optionSpec11));
                     dedicatedServer1.setDemo(optionSet.has(optionSpec2));
diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index b76ccbdc0b6f5f17b43f735295a2ec51100fbeef..778672065f2ac0068bd4e4c381685e597b7c28e3 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1177,7 +1177,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @DontObfuscate
     public String getServerModName() {
-        return "vanilla";
+        return "Airflow"; // Airflow
     }
 
     public SystemReport fillSystemReport(SystemReport systemReport) {
@@ -2122,4 +2122,15 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             };
         }
     }
+
+
+    // Airflow start
+    public net.minecraft.server.dedicated.DedicatedServer getDedicatedServer() {
+        if (isDedicatedServer()) {
+            return (net.minecraft.server.dedicated.DedicatedServer) this;
+        }
+
+        return null;
+    }
+    // Airflow end
 }
diff --git a/net/minecraft/server/dedicated/DedicatedServer.java b/net/minecraft/server/dedicated/DedicatedServer.java
index 2247a5e996e4293e1e3d21e86a3bbed9bb517d33..28807e0edfbb8d79087b45a97430b432fb5f424c 100644
--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -79,6 +79,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     @Nullable
     private DebugSampleSubscriptionTracker debugSampleSubscriptionTracker;
     private final ServerLinks serverLinks;
+    public final me.glicz.airflow.Airflow airflow; // Airflow
 
     public DedicatedServer(
         Thread serverThread,
@@ -88,13 +89,17 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         DedicatedServerSettings settings,
         DataFixer fixerUpper,
         Services services,
-        ChunkProgressListenerFactory progressListenerFactory
+        ChunkProgressListenerFactory progressListenerFactory, me.glicz.airflow.Airflow airflow // Airflow
     ) {
         super(serverThread, storageSource, packRepository, worldStem, Proxy.NO_PROXY, fixerUpper, services, progressListenerFactory);
         this.settings = settings;
         this.rconConsoleSource = new RconConsoleSource(this);
         this.serverTextFilter = ServerTextFilter.createFromConfig(settings.getProperties());
         this.serverLinks = createServerLinks(settings);
+        // Airflow start
+        this.airflow = airflow;
+        this.airflow.createServer(this);
+        // Airflow end
     }
 
     @Override
@@ -117,7 +122,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         thread.setDaemon(true);
         thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
         thread.start();
-        LOGGER.info("Starting minecraft server version {}", SharedConstants.getCurrentVersion().getName());
+        LOGGER.info("Starting {} Minecraft server version {}-{}@{}", getServerModName(), SharedConstants.getCurrentVersion().getName(), airflow.version.getBranch(), airflow.version.getShortCommit());
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
             LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
         }
@@ -177,6 +182,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             return false;
         } else {
             this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage));
+            this.airflow.pluginLoader.loadPlugins(); // Airflow
             this.debugSampleSubscriptionTracker = new DebugSampleSubscriptionTracker(this.getPlayerList());
             this.tickTimeLogger = new RemoteSampleLogger(
                 TpsDebugDimensions.values().length, this.debugSampleSubscriptionTracker, RemoteDebugSampleType.TICK_TIME
@@ -186,6 +192,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             GameProfileCache.setUsesAuthentication(this.usesAuthentication());
             LOGGER.info("Preparing level \"{}\"", this.getLevelIdName());
             this.loadLevel();
+            this.airflow.pluginLoader.enablePlugins(); // Airflow
             long l = Util.getNanos() - nanos;
             String string = String.format(Locale.ROOT, "%.3fs", l / 1.0E9);
             LOGGER.info("Done ({})! For help, type \"help\"", string);
@@ -532,6 +539,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     @Override
     public void stopServer() {
         super.stopServer();
+        this.airflow.pluginLoader.disablePlugins(); // Airflow
         Util.shutdownExecutors();
         SkullBlockEntity.clear();
     }
