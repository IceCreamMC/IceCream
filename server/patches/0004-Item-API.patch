From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: GliczDev <67753196+GliczDev@users.noreply.github.com>
Date: Wed, 28 Aug 2024 21:03:48 +0200
Subject: [PATCH] Item API


diff --git a/net/minecraft/core/component/DataComponentType.java b/net/minecraft/core/component/DataComponentType.java
index bf9fee15a67a17ab841f2b0ffeee619b98914f8d..fc37532d50e8a071fcfbd819c347f35bd038321a 100644
--- a/net/minecraft/core/component/DataComponentType.java
+++ b/net/minecraft/core/component/DataComponentType.java
@@ -47,6 +47,8 @@ public interface DataComponentType<T> {
 
     StreamCodec<? super RegistryFriendlyByteBuf, T> streamCodec();
 
+    me.glicz.airflow.item.component.AirItemComponentType airItemComponentType(); // Airflow - Item API
+
     public static class Builder<T> {
         @Nullable
         private Codec<T> codec;
@@ -81,6 +83,7 @@ public interface DataComponentType<T> {
             @Nullable
             private final Codec<T> codec;
             private final StreamCodec<? super RegistryFriendlyByteBuf, T> streamCodec;
+            private final me.glicz.airflow.api.util.LazyReference<me.glicz.airflow.item.component.AirItemComponentType> airItemComponentType = me.glicz.airflow.item.component.adapter.ItemComponentAdapters.wrap(this); // Airflow - Item API
 
             SimpleType(@Nullable Codec<T> codec, StreamCodec<? super RegistryFriendlyByteBuf, T> streamCodec) {
                 this.codec = codec;
@@ -98,6 +101,17 @@ public interface DataComponentType<T> {
                 return this.streamCodec;
             }
 
+            // Airflow start - Item API
+            @Override
+            public me.glicz.airflow.item.component.AirItemComponentType airItemComponentType() {
+                if (airItemComponentType == null) {
+                    return null;
+                }
+
+                return airItemComponentType.get();
+            }
+            // Airflow end - Item API
+
             @Override
             public String toString() {
                 return Util.getRegisteredName(BuiltInRegistries.DATA_COMPONENT_TYPE, this);
diff --git a/net/minecraft/world/item/Item.java b/net/minecraft/world/item/Item.java
index 42c9c970fe1cd235e8c2d860b612eec39eab5b5f..12be7e8fa6efe9380d1345135a2f9de26fda8ca6 100644
--- a/net/minecraft/world/item/Item.java
+++ b/net/minecraft/world/item/Item.java
@@ -89,6 +89,7 @@ public class Item implements FeatureElement, ItemLike {
     private final Item craftingRemainingItem;
     protected final String descriptionId;
     private final FeatureFlagSet requiredFeatures;
+    public final me.glicz.airflow.item.AirItemType airItemType = new me.glicz.airflow.item.AirItemType(this); // Airflow - Item API
 
     public static int getId(Item item) {
         return item == null ? 0 : BuiltInRegistries.ITEM.getId(item);
diff --git a/net/minecraft/world/item/ItemStack.java b/net/minecraft/world/item/ItemStack.java
index 256da971f365d78669d6b62683ca59ea513f5ee5..03ac113d88467c9f64f8cdc980391fba07d2a102 100644
--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -185,6 +185,7 @@ public final class ItemStack implements DataComponentHolder {
     final PatchedDataComponentMap components;
     @Nullable
     private Entity entityRepresentation;
+    public final me.glicz.airflow.item.stack.AirItemStack airItemStack = new me.glicz.airflow.item.stack.AirItemStack(this); // Airflow - Item API
 
     private static DataResult<ItemStack> validateStrict(ItemStack stack) {
         DataResult<Unit> dataResult = validateComponents(stack.getComponents());
